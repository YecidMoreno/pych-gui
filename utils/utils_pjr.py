import os
import json
from utils.utils_config import AppConfig


class PYCH_Project:
    def __init__(self, path, APP_CFG: AppConfig = None):
        self.path = path
        self.cfg = {}
        self.files = []
        self.cfg_files = []
        self.cfg_file_name = ""
        self.cb_values = {}
        self.APP_CFG = APP_CFG

        self.model_names = []

        if self.path is None or not os.path.isdir(self.path):
            print(f"Invalid project path: {self.path}")
            return
        
        self.files = os.listdir(self.path)
        self.cfg_files = [f for f in self.files if f.endswith(".cfg")]
        self.model_names = [f for f in self.files if f.endswith(".json")]

        self.cb_values["CONFIG_FILES"] = self.cfg_files
        self.cb_values["MODEL_NAME"] = self.model_names

        if len(self.cfg_files) == 0:
            print(f"No config files found in {self.path}")
            return      

        self.prj_cfg = AppConfig(path=os.path.join(self.path, "~" + self.path.split('/')[-1]))

        if self.prj_cfg.get("LAST_CONFIG_FILE", "") in self.cfg_files:
            self.cfg_file_name = self.prj_cfg.get("LAST_CONFIG_FILE", "")
        else:
            self.cfg_file_name = self.cfg_files[0]
            self.prj_cfg.update("LAST_CONFIG_FILE", self.cfg_file_name)
            self.prj_cfg.save()

        self.load()

        self.print()

        if self.APP_CFG is not None:
            self.APP_CFG.update("LAST_PROJECT_PATH", self.path)
            self.APP_CFG.save()

    
    def load(self):
        try:
            print(f"Loading config from {os.path.join(self.path, self.cfg_file_name)}")
            with open(os.path.join(self.path, self.cfg_file_name), 'r') as f:
                self.cfg = json.load(f)

        except FileNotFoundError:
            pass
            # self.cfg = {}

        self.cfg["PROJECT_NAME"] = self.path.split('/')[-1]
        self.cfg["PROJECT_PATH"] = self.path
        self.cfg["ACTIVATE_SH"] = self.cfg_file_name.replace(".cfg", ".sh")
        self.cfg["CONFIG_FILE"] = self.cfg_file_name

    def save(self):
        with open(self.path, 'w') as f:
            json.dump(self.cfg, f, indent=4)

    def get(self, key, default=None):
        return self.cfg.get(key, default)

    def update(self, key, value):
        self.cfg[key] = value

    def clear(self):
        self.cfg.clear()

    def get_activate_sh_path(self,full_path=True):
        self.cfg["ACTIVATE_SH"] = self.cfg.get("CONFIG_FILE", "activate.sh").replace(".cfg", ".sh")
        if full_path:
            return os.path.join(self.cfg.get("PROJECT_PATH", ""), self.cfg.get("ACTIVATE_SH", "activate.sh"))
        else:
            return self.cfg.get("ACTIVATE_SH", "activate.sh")

    def print(self):
        print(f"path: {self.path}")
        print(f"files: {self.files}")
        print(f"cfg_files: {self.cfg_files}")
        print(f"model_names: {self.model_names}")

    def create_activate_sh(self):

        Jaux = self.cfg.copy()
        if self.APP_CFG is None:
            non_store = []
        else:
            non_store = self.APP_CFG.get("_NON_STORE_CFG", [])
            
        for key in list(Jaux.keys()):
            if key.startswith("#") or key in non_store:
                Jaux.pop(key)
                continue

        cfg_to_save=os.path.join(self.cfg["PROJECT_PATH"], self.cfg["CONFIG_FILE"])
        print(f"Configuration saved in {cfg_to_save}")
        with open(cfg_to_save, "w") as f:
            json.dump(Jaux, f, indent=4)
    
        

        to_save = self.get_activate_sh_path()
        with open(to_save, "w") as f:
            f.write("#!/bin/bash\n")
            f.write("# Generated by pych-gui\n")

            f.write("\n")
            for key in self.cfg.keys():
                if not key.startswith("#") and not key.startswith("_"):
                    #si self.cfg[key] es array, guardarlo como lista separada por espacios
                    if isinstance(self.cfg[key], list):
                        value = " ".join(self.cfg[key])
                        f.write(f"export {key}='{value}'\n")
                    else:
                        f.write(f"export {key}='{self.cfg[key]}'\n")



            f.write("\n")
            f.write('export REMOTE_SSH_ARGS="-i ${REMOTE_SSH_KEY} "\n')
            f.write('export REMOTE_SSH="${REMOTE_USER}@${REMOTE_ADDR}" \n')
            f.write('export REMOTE_TTY="ssh $REMOTE_SSH_ARGS $REMOTE_SSH" \n')

            f.write("\n")
            f.write('export LD_LIBRARY_PATH=lib/:${LD_LIBRARY_PATH} \n')

            f.write("\n")
            f.write("export PYCH_CORE_ACTIVATED=\"1\" \n")
            f.write('export PYCH_NAME="core"\n')
            f.write(r"""export PS1='($(echo $PYCH_NAME))\[\e[1;32m\]\u@\h:\[\e[1;34m\]\w\[\e[0m\]\$ ' """)
            
            f.write("\n\n")
            f.write('echo "PYCH (Activated)"\n')

        return to_save

